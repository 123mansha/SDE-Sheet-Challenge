class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int j = 0 ;
        int []temp = new int[n] ;
        
        for(int i = 0 ; i < n-1 ; i++)
        {
            if(nums[i] != nums[i+1])
                temp[j++] = nums[i];
        }
        
        temp[j++]=nums[n-1];
        
        for(int i = 0 ; i < j ; i++)
            nums[i] = temp[i];
        
        return j;
    }
}

class Solution {
    public int removeDuplicates(int[] nums) {
        int j = 0 ;
        HashSet<Integer> set = new HashSet<>();
        
        for(int val : nums){
          //  System.out.println(val);
            set.add(val);
        //    System.out.println(set);
        }
            System.out.println(set);
        
        for(int val : nums)
        {
            if(set.contains(val))
            {
                nums[j++] = val;
                set.remove(val);
            }
        }
        return j;
    }
}

class Solution {
    public int removeDuplicates(int[] nums) {
        int j=0;
        LinkedHashSet<Integer> set = new LinkedHashSet<>();
        
        for(int val : nums)
            set.add(val);
        
        for(int i : set)
            nums[j++] = i;
        
        return j;
    }
}

class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int j = 0;
        
        for(int i = 0 ; i < n-1 ; i++)
        {
            if(nums[i] != nums[i+1])
                nums[j++] = nums[i];
        }
        
        nums[j++] = nums[n-1];
        
        return j;
    }
}


class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 0 ; 
        for(int  j = 1 ; j < nums.length;)
        {
            if(nums[j] != nums[i])
                nums[++i] = nums[j];
            j++;
        }
        return i+1;
    }
}
